apply plugin: 'android'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        ndk {
            stl 'stlport_static'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
    buildTypes {
        release {
            runProguard rootProject.ext.runProguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    productFlavors {
        x86 {
            flavorGroup "abi"
            versionCode Integer.parseInt("6" + defaultConfig.versionCode)
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            flavorGroup "abi"
            versionCode Integer.parseInt("4" + defaultConfig.versionCode)
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            flavorGroup "abi"
            versionCode Integer.parseInt("2" + defaultConfig.versionCode)
            ndk {
                abiFilter "armabi-v7a"
            }
        }
        arm {
            flavorGroup "abi"
            versionCode Integer.parseInt("1" + defaultConfig.versionCode)
            ndk {
                abiFilter "armabi"
            }
        }
        fat {
            flavorGroup "abi"
        }
    }
}
configurations {
    unitTestCompile.extendsFrom runtime
    unitTestRuntime.extendsFrom unitTestCompile
}
dependencies {
    compile rootProject.ext.compileSupportV4
    compile rootProject.ext.compileGoogleCollections
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':common')
    unitTestCompile files("$project.buildDir/classes/release")
    unitTestCompile 'junit:junit:4.10'
    unitTestCompile 'org.robolectric:robolectric:2.2'
    unitTestCompile 'com.google.android:android:4.0.1.2'
}

sourceSets {
    unitTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/res')
    }
}

task unitTest(type: Test, dependsOn: assemble) {
    testClassesDir = project.sourceSets.unitTest.output.classesDir
    classpath = project.sourceSets.unitTest.runtimeClasspath
}
check.dependsOn unitTest
